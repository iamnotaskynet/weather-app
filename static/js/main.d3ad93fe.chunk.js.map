{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Form","props","onSubmit","weatherMethod","type","name","palceholder","Weather","className","city","country","temp","pressure","sunrise","sunset","error","API_KEY","App","state","undefined","gettingWeather","_callee","e","api_url","data","date1","date2","sunrise_time","sunset_time","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","Date","sys","getHours","substr","getMinutes","getSeconds","_this","setState","main","stop","info","components_form","this","weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3ad93fe.chunk.js","sourcesContent":["import React from 'react';\n\nconst Info = () => (\n    <div>\n        <h2>Weather application</h2>\n        <p>Get weather info in your city!</p>\n    </div>\n);\n\nexport default Info;","import React from 'react';\n\nconst Form = (props) => (\n    <form onSubmit={props.weatherMethod}>\n        <input type=\"text\" name=\"city\" palceholder=\"City\"/>\n        <button>Get weather!</button>\n    </form>\n);\n\nexport default Form;","import React from 'react';\n\nconst Weather = props => (\n    <div className=\"infoWeth\">\n    {\n        props.city &&\n        <div>\n            <p>Location: {props.city}, {props.country}</p>\n            <p>Tempreture: {props.temp}</p>\n            <p>Pressure: {props.pressure}</p>\n            <p>Sunrise: {props.sunrise}</p>\n            <p>Sunset: {props.sunset}</p>\n        </div>\n    }\n        <p className=\"error\">{props.error}</p>\n            \n    </div>\n);\n\nexport default Weather;","import React, { Component } from 'react';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/weather';\n// import './App.css';\n\n\n\nconst API_KEY = \"27c52a9dc848af43d1b79bf8f84350f0\";\nclass App extends Component {\n  \n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    error: undefined\n  }\n\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    let city = e.target.elements.city.value;\n\n    \n\n    if(city) {\n      const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n      console.log(data);\n\n      let date1 = new Date(data.sys.sunrise*1000);\n      let date2 = new Date(data.sys.sunset*1000);\n      \n      let sunrise_time = `${\"0\".concat(date1.getHours()).substr(-2)}:${\"0\".concat(date1.getMinutes()).substr(-2)}:${\"0\".concat(date1.getSeconds()).substr(-2)}`;\n      let sunset_time = `${\"0\".concat(date2.getHours()).substr(-2)}:${\"0\".concat(date2.getMinutes()).substr(-2)}:${\"0\".concat(date2.getSeconds()).substr(-2)}`;\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country:  data.sys.country,\n        pressure: data.main.pressure,\n        sunrise: sunrise_time,\n        sunset: sunset_time,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n        error: \"Enter city name\"\n      });\n    }\n    \n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n                <Info />\n              </div>\n              <div className=\"col-sm-7 form\">\n                <Form weatherMethod={this.gettingWeather} />\n                <Weather\n                  temp={this.state.temp}\n                  city={this.state.city}\n                  country={this.state.country}\n                  pressure={this.state.pressure}\n                  sunrise={this.state.sunrise}\n                  sunset={this.state.sunset}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        \n\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}